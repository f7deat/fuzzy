{"version":3,"sources":["api.ts","components/button.tsx","components/input.tsx","components/label.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["exchangeToken","params","a","axios","get","grant_type","catch","error","data","access_token","Button","props","className","onClick","children","Input","onChange","Label","App","useState","client_id","set_client_id","client_secret","set_client_secret","fb_exchange_token","set_fb_exchange_token","set_access_token","handleOk","toast","response","type","e","target","value","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","icon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAEO,SAAeA,EAAtB,kC,4CAAO,WAA6BC,GAA7B,SAAAC,EAAA,+EACEC,IACJC,IADI,gDAGH,CACEH,OAAO,aACLI,WAAY,qBACTJ,KAIRK,OAAM,SAACC,GACN,MAAO,CACLC,KAAM,CACJC,aAAc,GACdF,MAAOA,QAfV,4C,iCCMQG,EALuB,SAACC,GACnC,OACI,wBAAQC,UAAU,kBAAkBC,QAASF,EAAME,QAAnD,SAA6DF,EAAMG,YCG5DC,EALqB,SAACJ,GACjC,OACI,uBAAOC,UAAU,eAAeI,SAAUL,EAAMK,YCGzCC,EALqB,SAACN,GACjC,OACI,uBAAOC,UAAU,gBAAjB,SAAkCD,EAAMG,Y,aC8DjCI,MA3Df,WAEE,MAAmCC,mBAAiB,IAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2CF,mBAAiB,IAA5D,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAmDJ,mBAAiB,IAApE,mBAAOK,EAAP,KAA0BC,EAA1B,KACA,EAAyCN,qBAAzC,mBAAOV,EAAP,KAAqBiB,EAArB,KAEMC,EAAQ,uCAAG,4BAAAzB,EAAA,yDACVkB,EADU,yCAENQ,YAAM,4BAFA,UAIVN,EAJU,yCAKNM,YAAM,gCALA,UAOVJ,EAPU,yCAQNI,YAAM,mCARA,uBAUM5B,EAAc,CACjCoB,YACAE,gBACAE,sBAba,QAUXK,EAVW,QAeFrB,KAAKD,OAChBqB,YAAM,UAAD,OAAWC,EAASrB,KAAKD,OAAS,CAACuB,KAAK,UAE/CJ,EAAiBG,EAASrB,KAAKC,cAlBhB,4CAAH,qDAqBd,OACE,sBAAKG,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,yBACA,cAAC,EAAD,CAAOI,SAAU,SAACe,GAAD,OAAYV,EAAcU,EAAEC,OAAOC,UACpD,cAAC,EAAD,8BACA,cAAC,EAAD,CAAOjB,SAAU,SAACe,GAAD,OAAYR,EAAkBQ,EAAEC,OAAOC,UACxD,cAAC,EAAD,+BACA,cAAC,EAAD,CAAOjB,SAAU,SAACe,GAAD,OAAYN,EAAsBM,EAAEC,OAAOC,UAC5D,qBAAKrB,UAAU,OAAf,SACE,cAAC,EAAD,CAAQC,QAASc,EAAjB,8BAEF,cAAC,EAAD,qBACA,0BAAUf,UAAU,eAApB,SAAoCH,OAEtC,cAAC,IAAD,CACEyB,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,EACZC,KAAK,qBC/CEC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df25050b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport async function exchangeToken(params: API.ExchangeParams) {\r\n  return axios\r\n    .get<API.ExchangeResponse>(\r\n      `https://graph.facebook.com/oauth/access_token`,\r\n      {\r\n        params: {\r\n          grant_type: \"fb_exchange_token\",\r\n          ...params,\r\n        },\r\n      }\r\n    )\r\n    .catch((error) => {\r\n      return {\r\n        data: {\r\n          access_token: \"\",\r\n          error: error\r\n        },\r\n      };\r\n    });\r\n}\r\n","type ButtonProps = {\r\n    onClick?: any\r\n}\r\nconst Button: React.FC<ButtonProps> = (props) => {\r\n    return (\r\n        <button className=\"btn btn-primary\" onClick={props.onClick}>{props.children}</button>\r\n    )\r\n}\r\nexport default Button","type InputProps = {\r\n    onChange?: any\r\n}\r\nconst Input: React.FC<InputProps> = (props) => {\r\n    return (\r\n        <input className=\"form-control\" onChange={props.onChange} />\r\n    )\r\n}\r\nexport default Input","type LabelProps = {\r\n    className?: any\r\n}\r\nconst Label: React.FC<LabelProps> = (props) => {\r\n    return (\r\n        <label className=\"control-label\">{props.children}</label>\r\n    )\r\n}\r\nexport default Label","import React, { useState } from 'react';\r\nimport { exchangeToken } from './api';\r\nimport Button from './components/button';\r\nimport Input from './components/input';\r\nimport Label from './components/label';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App() {\r\n\r\n  const [client_id, set_client_id] = useState<string>('')\r\n  const [client_secret, set_client_secret] = useState<string>('')\r\n  const [fb_exchange_token, set_fb_exchange_token] = useState<string>('')\r\n  const [access_token, set_access_token] = useState<string>()\r\n\r\n  const handleOk = async () => {\r\n    if (!client_id) {\r\n      return toast('Please input client id!');\r\n    }\r\n    if (!client_secret) {\r\n      return toast('Please input client secret!');\r\n    }\r\n    if (!fb_exchange_token) {\r\n      return toast('Please input short live token!');\r\n    }\r\n    var response = await exchangeToken({\r\n      client_id,\r\n      client_secret,\r\n      fb_exchange_token\r\n    })\r\n    if (response.data.error) {\r\n      toast(`Error: ${response.data.error}`, {type:\"error\"});\r\n    }\r\n    set_access_token(response.data.access_token);\r\n  }\r\n\r\n  return (\r\n    <div className='app'>\r\n      <div className='container'>\r\n        <Label>Client ID:</Label>\r\n        <Input onChange={(e: any) => set_client_id(e.target.value)} />\r\n        <Label>Client Scecret:</Label>\r\n        <Input onChange={(e: any) => set_client_secret(e.target.value)} />\r\n        <Label>Short Live Token</Label>\r\n        <Input onChange={(e: any) => set_fb_exchange_token(e.target.value)} />\r\n        <div className='mb-4'>\r\n          <Button onClick={handleOk}>Exchange token</Button>\r\n        </div>\r\n        <Label>Result</Label>\r\n        <textarea className='form-control'>{access_token}</textarea>\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        icon=\"ðŸš€\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}